<template>
  <div class="enum" @dblclick="dblclick()">
    {{value1}} - {{keyField}} - {{labelField}}
    <template v-if="readOnly">
      <el-tag v-for="item in value2" :key="item[keyField]" :type="tagType">{{item[labelField]}}</el-tag>
    </template>

    <template v-else>
      <template v-if="mode == 'radio'">
        <el-radio-group v-model="value1" v-bind="[$props, $attrs]" v-if="data2.length <= enumCount"
                        @change="$emit('change',value1)">
          <el-radio v-for="(item,index) in data2" :label="item[keyField]"
                    :key="item[keyField]">{{item[labelField]}}
          </el-radio>
        </el-radio-group>

        <el-select v-model="value1" placeholder="请选择" v-else @change="$emit('change',value1)">
          <el-option
            v-for="item in data2"
            :key="item[keyField]"
            :label="item[labelField]"
            :value="item">
          </el-option>
        </el-select>
      </template>
      <template v-else>
        <el-checkbox-group v-model="value2" v-bind="[$props, $attrs]" v-if="data2.length <= enumCount"
                           @change="$emit('change',value2)">
          <el-checkbox v-for="(item,index) in data2" :label="item[keyField]"
                       :key="item[keyField]">{{item[labelField]}}
          </el-checkbox>
        </el-checkbox-group>
        <el-select v-model="value2" multiple placeholder="请选择" v-else @change="$emit('change',value2)">
          <el-option
            v-for="(item,index) in data2"
            :key="item[keyField]"
            :label="item[labelField]"
            :value="item">
          </el-option>
        </el-select>
      </template>
    </template>

  </div>
</template>
<script>
    export default {
        name: "selector",
        props: {
            url: {type: String, default: ""},
            data: {
                type: [Object, Array], default() {
                    return []
                }
            },
            tagType: {type: String, default: ""},
            //当data是Array的时候，需要指定 field中的两个值。 当data是Object的时候，指定一个field表示显示的值
            fields: {
                type: String, default() {
                    return ""
                }
            },
            valueField: {type: String, default: ""}, //返回的值字段，默认返回 fields的两个字段
            readOnly: {type: Boolean, default: false},
            enumCount: {type: Number, default: 3}, //使用 enum方式的个数
            mode: {type: String, default: "radio"},
            value: {
                type: [String, Array, Object], default() {
                    return {};
                }
            }
        },
        watch: {
            data: {
                deep: true, handler(v) {
                    if (jv.dataEquals(v, this.data2)) {
                        return;
                    }

                    this.setData(v);
                }
            },
            url(v) {
                if (jv.dataEquals(v, this.url)) {
                    return;
                }
                this.$http.post(v).then(res => {
                    this.setData(res.data.data);
                });
            },
            value: {
                deep: true, handler(v) {
                    if (this.mode == "radio") {

                        if (jv.IsNull(v)) {
                            this.value1 = {};
                            return;
                        }
                        this.value1 = v;
                    } else {
                        if (jv.dataEquals(v, this.value2)) {
                            return;
                        }
                        if (jv.IsNull(v)) {
                            this.value2 = [];
                            return;
                        }
                        this.value2 = v;
                    }
                }
            },
            value1: {
                deep: true, handler(v) {
                    if (this.mode != "radio") return;

                    var ret = v;
                    if (this.valueField) {
                        ret = ret[this.valueField];
                    }


                    if (jv.dataEquals(ret, this.value)) {
                        return;
                    }
                    this.$emit("input", ret);
                }
            },
            value2: {
                deep: true, handler(v) {
                    if (this.mode == "radio") return;
                    var ret = v;
                    if (this.valueField) {
                        ret = (ret || []).map(it => it[this.valueField]);
                    }


                    if (jv.dataEquals(ret, this.value)) {
                        return;
                    }
                    this.$emit("input", ret);
                }
            }
        },
        data() {
            return {
                data2: [],
                value1: {},
                value2: [],
                keyField: "",
                labelField: ""
            };
        },
        created() {
            // this.label2 = ""; // readOnly 显示时用。
            this.init();
        },
        methods: {
            dblclick() {
                if (this.readOnly) {
                    return;
                }
                this.value2 = [];
                this.value1 = {};
            },
            init() {

                this.setFields();

                if (["array", "set"].includes(this.value.Type) == false) {
                    this.value2 = [this.value];
                } else {
                    this.value1 = this.value;
                }

                if (this.url) {
                    this.$http.post(this.url).then(res => {
                        this.setData(res.data.data);
                    });
                } else {
                    this.setData(this.data);
                }
            },
            setFields() {
                var fields = (this.fields || "").split(",");
                this.keyField = fields[0];
                this.labelField = fields[1];
            },
            setData(data) {
                if (jv.IsNull(data)) {
                    this.data2 = [];
                    return;
                }

                var dataType = data.Type;

                var d2 = [];
                if (["array", "set"].includes(dataType) == false) {
                    for (var key of Object.keys(data)) {
                        var value = data[key];
                        var item = {};
                        item[this.keyField] = key;
                        item[this.labelField] = value;
                        d2.push(item);
                    }
                } else {
                    d2 = data;
                }

                if (jv.dataEquals(this.data2, d2)) {
                    return;
                }
                this.data2 = d2;
                // this.label2 = this.data2[this.value2] || "";
            }
        }
    }
</script>
<style>
  .v .enum {
    margin-left: 8px;
  }
</style>
